[{"/Users/chuan/Documents/web3/l5web/dapp-frontend/src/index.js":"1","/Users/chuan/Documents/web3/l5web/dapp-frontend/src/App.js":"2","/Users/chuan/Documents/web3/l5web/dapp-frontend/src/page.js":"3","/Users/chuan/Documents/web3/l5web/dapp-frontend/src/util/web3interact.js":"4","/Users/chuan/Documents/web3/l5web/dapp-frontend/src/appconfig.js":"5"},{"size":224,"mtime":1669316654000,"results":"6","hashOfConfig":"7"},{"size":176,"mtime":1669316654000,"results":"8","hashOfConfig":"7"},{"size":3964,"mtime":1669975575881,"results":"9","hashOfConfig":"7"},{"size":4024,"mtime":1669975884414,"results":"10","hashOfConfig":"7"},{"size":97,"mtime":1669975897916,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"19amb7n",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chuan/Documents/web3/l5web/dapp-frontend/src/index.js",[],["24","25"],"/Users/chuan/Documents/web3/l5web/dapp-frontend/src/App.js",[],"/Users/chuan/Documents/web3/l5web/dapp-frontend/src/page.js",["26","27"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n\tTinTinTokenContract,\n\tconnectWallet,\n\ttransferToken,\n\tloadTokenName,\n\tloadTokenAccountBalance,\n\tgetCurrentWalletConnected,\n\tloadTotalSupply,\n} from \"./util/web3interact.js\";\n\nimport TinTinlogo from \"./assets/tintinLogo.jpeg\";\n\nconst TinTinToken = () => {\n\tconst [walletAddress, setWallet] = useState(\"\");                     // ËøûÊé•Èí±ÂåÖÁöÑÂú∞ÂùÄ\n\tconst [status, setStatus] = useState(\"\");                            // Áä∂ÊÄÅ‰ø°ÊÅØÔºåÂëäËØâuser Áé∞Âú®ÁöÑ‰∫§‰∫íÁä∂ÊÄÅÔºå\n\tconst [tokenName, setTokenName] = useState(\"No connection.\");        // TokenÂêçÁß∞\n\tconst [tokenBalance, settokenBalance] = useState(\"No connection.\");  // Êô∫ËÉΩÂêàÁ∫¶‰∫§‰∫íÊó∂ÔºåËé∑ÂèñÁöÑ‰ø°ÊÅØ„ÄÇ\n\tconst [toAddress, setToAddress] = useState(\"\");                      // ÂèëÈÄÅtoken Êé•Êî∂ÊñπÁöÑÂú∞ÂùÄ\n\tconst [totalSupply, setTotalSupply] = useState(0);\n\n\t// ÂΩìwalletAddressÂÄºÂèòÂåñÊó∂ÔºåÂ∞±‰ºöÊâßË°å„ÄÇ \n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tif (walletAddress !== \"\") {\n\t\t\t\tconst tokenBalance = await loadTokenAccountBalance(walletAddress);\n\t\t\t\tsettokenBalance(tokenBalance);\n\t\t\t}\n\t\t\tconst tokenName = await loadTokenName();\n\t\t\tsetTokenName(tokenName);\n\t\t\tconst { address, status } = await getCurrentWalletConnected();\n\t\t\tsetWallet(address);\n\t\t\tsetStatus(status);\n\n\t\t\tconst totalSupply = await loadTotalSupply();\n\t\t\tsetTotalSupply(totalSupply);\n\n\t\t\taddWalletListener();\n\t\t\taddSmartContractListener();\n\t\t}\n\t\tfetchData();\n\t}, [walletAddress]);\n\n  // ÁõëÂê¨metamask ËøûÊé•Ë¥¶Êà∑ÁöÑÊîπÂèòÔºåÁÑ∂ÂêéÂÆûÊó∂ÊòæÁ§∫Âú®ÂâçÁ´Ø„ÄÇ\n\tfunction addWalletListener() {\n\t\tif (window.ethereum) {\n\t\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\n\t\t\t\tif (accounts.length > 0) {\n\t\t\t\t\tsetWallet(accounts[0]);\n\t\t\t\t\tsetStatus(\n\t\t\t\t\t\t\"üëÜüèΩ input the transfer to addresst in the text-field above.\"\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tsetWallet(\"\");\n\t\t\t\t\tsetStatus(\"ü¶ä Connect to Metamask using the top right button.\");\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tsetStatus(\n\t\t\t\t<p>\n\t\t\t\t\t{\" \"}\n\t\t\t\t\tü¶ä{\" \"}\n\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\tbrowser.\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t);\n\t\t}\n\t}\n\n  // ÁõëÂê¨ Êô∫ËÉΩÂêàÁ∫¶\n\tfunction addSmartContractListener() {\n\t\tTinTinTokenContract.events.Transfer({}, (error, data) => {\n\t\t\tconsole.log(data);\n\t\t\tif (error) {\n\t\t\t\tsetStatus(\"üò• \" + error.message);\n\t\t\t} else {\n\t\t\t\tsetToAddress(\"\");\n\t\t\t\tsetStatus(\"token transfer completed\");\n\t\t\t}\n\t\t});\n\t}\n\n  // ËøûÊé•Èí±ÂåÖÊåâÈíÆË¢´ÁÇπÂáªÊó∂ÂÄôÔºåÊâßË°åËøûÊé•Èí±ÂåÖÔºåÂπ∂Êõ¥Êñ∞Áä∂ÊÄÅ„ÄÇ\n\tconst connectWalletPressed = async () => {\n\t\tconst walletResponse = await connectWallet();\n\t\tsetStatus(walletResponse.status);\n\t\tsetWallet(walletResponse.address);\n\t};\n\n  // ÂèëÈÄÅtokenÔºåÂπ∂Êõ¥Êñ∞Áä∂ÊÄÅ„ÄÇ\n\tconst onTransferPressed = async () => {\n\t\tconst { status } = await transferToken(walletAddress, toAddress);\n\t\tsetStatus(status);\n\t};\n\n\t//the UI of our component\n\treturn (\n\t\t<div id=\"container\">\n\t\t\t<img id=\"logo\" src={TinTinlogo}></img>\n\t\t\t<button id=\"walletButton\" onClick={connectWalletPressed}>\n\t\t\t\t{walletAddress.length > 0 ? (\n\t\t\t\t\t\"Connected: \" +\n\t\t\t\t\tString(walletAddress).substring(0, 6) +\n\t\t\t\t\t\"...\" +\n\t\t\t\t\tString(walletAddress).substring(38)\n\t\t\t\t) : (\n\t\t\t\t\t<span>Connect Wallet</span>\n\t\t\t\t)}\n\t\t\t</button>\n\n\t\t\t<h2 style={{ paddingTop: \"50px\" }}>Token Name:</h2>\n\t\t\t<p>{tokenName}</p>\n\n\t\t\t<h2 style={{ paddingTop: \"50px\" }}>Balance:</h2>\n\t\t\t<p>{tokenBalance}</p>\n\n\t\t\t<h2 style={{ paddingTop: \"50px\" }}>Total Supply:</h2>\n\t\t\t<p>{totalSupply}</p>\n\n\t\t\t<h2 style={{ paddingTop: \"18px\" }}>Transfer 1 TinTin Token To:</h2>\n\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"transfer token to:\"\n\t\t\t\t\tonChange={(e) => setToAddress(e.target.value)}\n\t\t\t\t\tvalue={toAddress}\n\t\t\t\t/>\n\t\t\t\t<p id=\"status\">{status}</p>\n\n\t\t\t\t<button id=\"publish\" onClick={onTransferPressed}>\n\t\t\t\t\tTransfer\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default TinTinToken;\n","/Users/chuan/Documents/web3/l5web/dapp-frontend/src/util/web3interact.js",["28","29","30"],"/Users/chuan/Documents/web3/l5web/dapp-frontend/src/appconfig.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":64,"column":6,"nodeType":"37","messageId":"38","endLine":64,"endColumn":68,"fix":"39"},{"ruleId":"40","severity":1,"message":"41","line":102,"column":4,"nodeType":"37","endLine":102,"endColumn":36},{"ruleId":"35","severity":1,"message":"36","line":65,"column":7,"nodeType":"37","messageId":"38","endLine":65,"endColumn":69,"fix":"42"},{"ruleId":"35","severity":1,"message":"36","line":107,"column":7,"nodeType":"37","messageId":"38","endLine":107,"endColumn":69,"fix":"43"},{"ruleId":"35","severity":1,"message":"36","line":153,"column":6,"nodeType":"37","messageId":"38","endLine":153,"endColumn":75,"fix":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"47","text":"48"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"range":"49","text":"48"},{"range":"50","text":"48"},{"range":"51","text":"48"},"no-global-assign","no-unsafe-negation",[1947,1947]," rel=\"noreferrer\"",[1624,1624],[2488,2488],[3601,3601]]
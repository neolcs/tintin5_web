{"ast":null,"code":"var _jsxFileName = \"/Users/chuan/Documents/web3/l5web/dapp-frontend/src/util/web3interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 获取env variable\n// require('dotenv').config();\n\nconst {\n  alchemyKey\n} = require('../../appconfig.js');\n\n// 创建 web3 provider.\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\n// 创建 contract web3 instance.\n//    1. contract abi\n//····2. contract address， 去告诉web3.js 库 如何跟我们智能合约进行交互。\nconst contractABI = require(\"../assets/tintinToken-abi.json\");\nconst contractAddress = \"0x015d485485D26faaEd45b33bF2B5a48621eF5D1b\";\nexport const TinTinTokenContract = new web3.eth.Contract(contractABI, contractAddress);\n\n// 从智能合约读取数据\nexport const loadTokenName = async () => {\n  const tokenName = await TinTinTokenContract.methods.name().call();\n  return tokenName;\n};\nexport const loadTokenAccountBalance = async account => {\n  const balance = await TinTinTokenContract.methods.balanceOf(account).call();\n  return +balance / 10 ** 18;\n};\nexport const loadTotalSupply = async () => {\n  const totalSupply = await TinTinTokenContract.methods.totalSupply().call();\n  return +totalSupply / 10 ** 18;\n};\n\n// 链接metamask 钱包\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 input the transfer to addresst in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this)\n    };\n  }\n};\n// 获取链接钱包地址\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 input the transfer to addresst in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this)\n    };\n  }\n};\n\n// 发起交易\nexport const transferToken = async (fromAddress, toAddress) => {\n  let value = (10 ** 18).toFixed(0);\n  console.log(value);\n  //input error handling\n  if (!window.ethereum || fromAddress === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n  if (toAddress.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: fromAddress,\n    // must match user's active address.\n    data: TinTinTokenContract.methods.transfer(toAddress, value).encodeABI()\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://goerli.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 6\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the token balance will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};","map":{"version":3,"names":["alchemyKey","require","createAlchemyWeb3","web3","contractABI","contractAddress","TinTinTokenContract","eth","Contract","loadTokenName","tokenName","methods","name","call","loadTokenAccountBalance","account","balance","balanceOf","loadTotalSupply","totalSupply","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","getCurrentWalletConnected","length","transferToken","fromAddress","toAddress","value","toFixed","console","log","trim","transactionParameters","to","from","data","transfer","encodeABI","txHash","params","error"],"sources":["/Users/chuan/Documents/web3/l5web/dapp-frontend/src/util/web3interact.js"],"sourcesContent":["// 获取env variable\n// require('dotenv').config();\n\nconst { alchemyKey } = require('../../appconfig.js');\n\n\n// 创建 web3 provider.\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\n// 创建 contract web3 instance.\n//    1. contract abi\n//····2. contract address， 去告诉web3.js 库 如何跟我们智能合约进行交互。\nconst contractABI = require(\"../assets/tintinToken-abi.json\");\nconst contractAddress = \"0x015d485485D26faaEd45b33bF2B5a48621eF5D1b\";\nexport const TinTinTokenContract = new web3.eth.Contract(\n\tcontractABI,\n\tcontractAddress\n);\n\n\n// 从智能合约读取数据\nexport const loadTokenName = async () => {\n\tconst tokenName = await TinTinTokenContract.methods.name().call();\n\treturn tokenName;\n};\n\nexport const loadTokenAccountBalance = async (account) => {\n\tconst balance = await TinTinTokenContract.methods.balanceOf(account).call();\n\treturn +balance / 10 ** 18;\n};\n\n\nexport const loadTotalSupply = async () => {\n\tconst totalSupply = await TinTinTokenContract.methods.totalSupply().call();\n\treturn +totalSupply / 10 ** 18\n}\n\n// 链接metamask 钱包\nexport const connectWallet = async () => {\n\tif (window.ethereum) {\n\t\ttry {\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\tmethod: \"eth_requestAccounts\",\n\t\t\t});\n\t\t\tconst obj = {\n\t\t\t\tstatus: \"👆🏽 input the transfer to addresst in the text-field above.\",\n\t\t\t\taddress: addressArray[0],\n\t\t\t};\n\t\t\treturn obj;\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\taddress: \"\",\n\t\t\t\tstatus: \"😥 \" + err.message,\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\taddress: \"\",\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t🦊{\" \"}\n\t\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\t\tbrowser.\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t}\n};\n// 获取链接钱包地址\nexport const getCurrentWalletConnected = async () => {\n\tif (window.ethereum) {\n\t\ttry {\n\t\t\tconst addressArray = await window.ethereum.request({\n\t\t\t\tmethod: \"eth_accounts\",\n\t\t\t});\n\t\t\tif (addressArray.length > 0) {\n\t\t\t\treturn {\n\t\t\t\t\taddress: addressArray[0],\n\t\t\t\t\tstatus: \"👆🏽 input the transfer to addresst in the text-field above.\",\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\taddress: \"\",\n\t\t\t\t\tstatus: \"🦊 Connect to Metamask using the top right button.\",\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\taddress: \"\",\n\t\t\t\tstatus: \"😥 \" + err.message,\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\taddress: \"\",\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t🦊{\" \"}\n\t\t\t\t\t\t<a target=\"_blank\" href={`https://metamask.io/download.html`}>\n\t\t\t\t\t\t\tYou must install Metamask, a virtual Ethereum wallet, in your\n\t\t\t\t\t\t\tbrowser.\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</p>\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t}\n};\n\n// 发起交易\nexport const transferToken = async (fromAddress, toAddress) => {\n\tlet value = (10 ** 18).toFixed(0);\n\tconsole.log(value);\n\t//input error handling\n\tif (!window.ethereum || fromAddress === null) {\n\t\treturn {\n\t\t\tstatus:\n\t\t\t\t\"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n\t\t};\n\t}\n\n\tif (toAddress.trim() === \"\") {\n\t\treturn {\n\t\t\tstatus: \"❌ Your message cannot be an empty string.\",\n\t\t};\n\t}\n\n\t//set up transaction parameters\n\tconst transactionParameters = {\n\t\tto: contractAddress, // Required except during contract publications.\n\t\tfrom: fromAddress, // must match user's active address.\n\t\tdata: TinTinTokenContract.methods.transfer(toAddress, value).encodeABI(),\n\t};\n\n\t//sign the transaction\n\ttry {\n\t\tconst txHash = await window.ethereum.request({\n\t\t\tmethod: \"eth_sendTransaction\",\n\t\t\tparams: [transactionParameters],\n\t\t});\n\t\treturn {\n\t\t\tstatus: (\n\t\t\t\t<span>\n\t\t\t\t\t✅{\" \"}\n\t\t\t\t\t<a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n\t\t\t\t\t\tView the status of your transaction on Etherscan!\n\t\t\t\t\t</a>\n\t\t\t\t\t<br />\n\t\t\t\t\tℹ️ Once the transaction is verified by the network, the token balance\n\t\t\t\t\twill be updated automatically.\n\t\t\t\t</span>\n\t\t\t),\n\t\t};\n\t} catch (error) {\n\t\treturn {\n\t\t\tstatus: \"😥 \" + error.message,\n\t\t};\n\t}\n};\n"],"mappings":";;AAAA;AACA;;AAEA,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAGpD;AACA,MAAM;EAAEC;AAAkB,CAAC,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3D,MAAME,IAAI,GAAGD,iBAAiB,CAACF,UAAU,CAAC;;AAE1C;AACA;AACA;AACA,MAAMI,WAAW,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AAC7D,MAAMI,eAAe,GAAG,4CAA4C;AACpE,OAAO,MAAMC,mBAAmB,GAAG,IAAIH,IAAI,CAACI,GAAG,CAACC,QAAQ,CACvDJ,WAAW,EACXC,eAAe,CACf;;AAGD;AACA,OAAO,MAAMI,aAAa,GAAG,YAAY;EACxC,MAAMC,SAAS,GAAG,MAAMJ,mBAAmB,CAACK,OAAO,CAACC,IAAI,EAAE,CAACC,IAAI,EAAE;EACjE,OAAOH,SAAS;AACjB,CAAC;AAED,OAAO,MAAMI,uBAAuB,GAAG,MAAOC,OAAO,IAAK;EACzD,MAAMC,OAAO,GAAG,MAAMV,mBAAmB,CAACK,OAAO,CAACM,SAAS,CAACF,OAAO,CAAC,CAACF,IAAI,EAAE;EAC3E,OAAO,CAACG,OAAO,GAAG,EAAE,IAAI,EAAE;AAC3B,CAAC;AAGD,OAAO,MAAME,eAAe,GAAG,YAAY;EAC1C,MAAMC,WAAW,GAAG,MAAMb,mBAAmB,CAACK,OAAO,CAACQ,WAAW,EAAE,CAACN,IAAI,EAAE;EAC1E,OAAO,CAACM,WAAW,GAAG,EAAE,IAAI,EAAE;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,YAAY;EACxC,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACpB,IAAI;MACH,MAAMC,YAAY,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAClDC,MAAM,EAAE;MACT,CAAC,CAAC;MACF,MAAMC,GAAG,GAAG;QACXC,MAAM,EAAE,8DAA8D;QACtEC,OAAO,EAAEL,YAAY,CAAC,CAAC;MACxB,CAAC;MACD,OAAOG,GAAG;IACX,CAAC,CAAC,OAAOG,GAAG,EAAE;MACb,OAAO;QACND,OAAO,EAAE,EAAE;QACXD,MAAM,EAAE,KAAK,GAAGE,GAAG,CAACC;MACrB,CAAC;IACF;EACD,CAAC,MAAM;IACN,OAAO;MACNF,OAAO,EAAE,EAAE;MACXD,MAAM,eACL;QAAA,uBACC;UAAA,WACE,GAAG,kBACD,GAAG,eACN;YAAG,MAAM,EAAC,QAAQ;YAAC,IAAI,EAAG,mCAAmC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGzD;QAAA;UAAA;UAAA;UAAA;QAAA;MACD;QAAA;QAAA;QAAA;MAAA;IAGP,CAAC;EACF;AACD,CAAC;AACD;AACA,OAAO,MAAMI,yBAAyB,GAAG,YAAY;EACpD,IAAIV,MAAM,CAACC,QAAQ,EAAE;IACpB,IAAI;MACH,MAAMC,YAAY,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAClDC,MAAM,EAAE;MACT,CAAC,CAAC;MACF,IAAIF,YAAY,CAACS,MAAM,GAAG,CAAC,EAAE;QAC5B,OAAO;UACNJ,OAAO,EAAEL,YAAY,CAAC,CAAC,CAAC;UACxBI,MAAM,EAAE;QACT,CAAC;MACF,CAAC,MAAM;QACN,OAAO;UACNC,OAAO,EAAE,EAAE;UACXD,MAAM,EAAE;QACT,CAAC;MACF;IACD,CAAC,CAAC,OAAOE,GAAG,EAAE;MACb,OAAO;QACND,OAAO,EAAE,EAAE;QACXD,MAAM,EAAE,KAAK,GAAGE,GAAG,CAACC;MACrB,CAAC;IACF;EACD,CAAC,MAAM;IACN,OAAO;MACNF,OAAO,EAAE,EAAE;MACXD,MAAM,eACL;QAAA,uBACC;UAAA,WACE,GAAG,kBACD,GAAG,eACN;YAAG,MAAM,EAAC,QAAQ;YAAC,IAAI,EAAG,mCAAmC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAGzD;QAAA;UAAA;UAAA;UAAA;QAAA;MACD;QAAA;QAAA;QAAA;MAAA;IAGP,CAAC;EACF;AACD,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAG,OAAOC,WAAW,EAAEC,SAAS,KAAK;EAC9D,IAAIC,KAAK,GAAG,CAAC,EAAE,IAAI,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC;EACjCC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;EAClB;EACA,IAAI,CAACf,MAAM,CAACC,QAAQ,IAAIY,WAAW,KAAK,IAAI,EAAE;IAC7C,OAAO;MACNP,MAAM,EACL;IACF,CAAC;EACF;EAEA,IAAIQ,SAAS,CAACK,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,OAAO;MACNb,MAAM,EAAE;IACT,CAAC;EACF;;EAEA;EACA,MAAMc,qBAAqB,GAAG;IAC7BC,EAAE,EAAErC,eAAe;IAAE;IACrBsC,IAAI,EAAET,WAAW;IAAE;IACnBU,IAAI,EAAEtC,mBAAmB,CAACK,OAAO,CAACkC,QAAQ,CAACV,SAAS,EAAEC,KAAK,CAAC,CAACU,SAAS;EACvE,CAAC;;EAED;EACA,IAAI;IACH,MAAMC,MAAM,GAAG,MAAM1B,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;MAC5CC,MAAM,EAAE,qBAAqB;MAC7BuB,MAAM,EAAE,CAACP,qBAAqB;IAC/B,CAAC,CAAC;IACF,OAAO;MACNd,MAAM,eACL;QAAA,qBACG,GAAG,eACL;UAAG,MAAM,EAAC,QAAQ;UAAC,IAAI,EAAG,kCAAiCoB,MAAO,EAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAEhE,eACJ;UAAA;UAAA;UAAA;QAAA,QAAM;MAAA;QAAA;QAAA;QAAA;MAAA;IAKT,CAAC;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACf,OAAO;MACNtB,MAAM,EAAE,KAAK,GAAGsB,KAAK,CAACnB;IACvB,CAAC;EACF;AACD,CAAC"},"metadata":{},"sourceType":"module"}